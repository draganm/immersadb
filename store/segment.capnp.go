// Code generated by capnpc-go. DO NOT EDIT.

package store

import (
	strconv "strconv"
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
)

type Segment struct{ capnp.Struct }
type Segment_specific Segment
type Segment_specific_Which uint16

const (
	Segment_specific_Which_commit      Segment_specific_Which = 0
	Segment_specific_Which_dataLeaf    Segment_specific_Which = 1
	Segment_specific_Which_dataNode    Segment_specific_Which = 2
	Segment_specific_Which_wbbtreeNode Segment_specific_Which = 3
)

func (w Segment_specific_Which) String() string {
	const s = "commitdataLeafdataNodewbbtreeNode"
	switch w {
	case Segment_specific_Which_commit:
		return s[0:6]
	case Segment_specific_Which_dataLeaf:
		return s[6:14]
	case Segment_specific_Which_dataNode:
		return s[14:22]
	case Segment_specific_Which_wbbtreeNode:
		return s[22:33]

	}
	return "Segment_specific_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// Segment_TypeID is the unique identifier for the type Segment.
const Segment_TypeID = 0xecd761ba4de54b2e

func NewSegment(s *capnp.Segment) (Segment, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 3})
	return Segment{st}, err
}

func NewRootSegment(s *capnp.Segment) (Segment, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 3})
	return Segment{st}, err
}

func ReadRootSegment(msg *capnp.Message) (Segment, error) {
	root, err := msg.RootPtr()
	return Segment{root.Struct()}, err
}

func (s Segment) String() string {
	str, _ := text.Marshal(0xecd761ba4de54b2e, s.Struct)
	return str
}

func (s Segment) Children() (capnp.UInt64List, error) {
	p, err := s.Struct.Ptr(0)
	return capnp.UInt64List{List: p.List()}, err
}

func (s Segment) HasChildren() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Segment) SetChildren(v capnp.UInt64List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewChildren sets the children field to a newly
// allocated capnp.UInt64List, preferring placement in s's segment.
func (s Segment) NewChildren(n int32) (capnp.UInt64List, error) {
	l, err := capnp.NewUInt64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.UInt64List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

func (s Segment) Sizes() (capnp.UInt64List, error) {
	p, err := s.Struct.Ptr(1)
	return capnp.UInt64List{List: p.List()}, err
}

func (s Segment) HasSizes() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Segment) SetSizes(v capnp.UInt64List) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewSizes sets the sizes field to a newly
// allocated capnp.UInt64List, preferring placement in s's segment.
func (s Segment) NewSizes(n int32) (capnp.UInt64List, error) {
	l, err := capnp.NewUInt64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.UInt64List{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

func (s Segment) Specific() Segment_specific { return Segment_specific(s) }

func (s Segment_specific) Which() Segment_specific_Which {
	return Segment_specific_Which(s.Struct.Uint16(0))
}
func (s Segment_specific) SetCommit() {
	s.Struct.SetUint16(0, 0)

}

func (s Segment_specific) DataLeaf() ([]byte, error) {
	if s.Struct.Uint16(0) != 1 {
		panic("Which() != dataLeaf")
	}
	p, err := s.Struct.Ptr(2)
	return []byte(p.Data()), err
}

func (s Segment_specific) HasDataLeaf() bool {
	if s.Struct.Uint16(0) != 1 {
		return false
	}
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s Segment_specific) SetDataLeaf(v []byte) error {
	s.Struct.SetUint16(0, 1)
	return s.Struct.SetData(2, v)
}

func (s Segment_specific) DataNode() uint64 {
	if s.Struct.Uint16(0) != 2 {
		panic("Which() != dataNode")
	}
	return s.Struct.Uint64(8)
}

func (s Segment_specific) SetDataNode(v uint64) {
	s.Struct.SetUint16(0, 2)
	s.Struct.SetUint64(8, v)
}

func (s Segment_specific) WbbtreeNode() (WBBTreeNode, error) {
	if s.Struct.Uint16(0) != 3 {
		panic("Which() != wbbtreeNode")
	}
	p, err := s.Struct.Ptr(2)
	return WBBTreeNode{Struct: p.Struct()}, err
}

func (s Segment_specific) HasWbbtreeNode() bool {
	if s.Struct.Uint16(0) != 3 {
		return false
	}
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s Segment_specific) SetWbbtreeNode(v WBBTreeNode) error {
	s.Struct.SetUint16(0, 3)
	return s.Struct.SetPtr(2, v.Struct.ToPtr())
}

// NewWbbtreeNode sets the wbbtreeNode field to a newly
// allocated WBBTreeNode struct, preferring placement in s's segment.
func (s Segment_specific) NewWbbtreeNode() (WBBTreeNode, error) {
	s.Struct.SetUint16(0, 3)
	ss, err := NewWBBTreeNode(s.Struct.Segment())
	if err != nil {
		return WBBTreeNode{}, err
	}
	err = s.Struct.SetPtr(2, ss.Struct.ToPtr())
	return ss, err
}

// Segment_List is a list of Segment.
type Segment_List struct{ capnp.List }

// NewSegment creates a new list of Segment.
func NewSegment_List(s *capnp.Segment, sz int32) (Segment_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 3}, sz)
	return Segment_List{l}, err
}

func (s Segment_List) At(i int) Segment { return Segment{s.List.Struct(i)} }

func (s Segment_List) Set(i int, v Segment) error { return s.List.SetStruct(i, v.Struct) }

func (s Segment_List) String() string {
	str, _ := text.MarshalList(0xecd761ba4de54b2e, s.List)
	return str
}

// Segment_Promise is a wrapper for a Segment promised by a client call.
type Segment_Promise struct{ *capnp.Pipeline }

func (p Segment_Promise) Struct() (Segment, error) {
	s, err := p.Pipeline.Struct()
	return Segment{s}, err
}

func (p Segment_Promise) Specific() Segment_specific_Promise {
	return Segment_specific_Promise{p.Pipeline}
}

// Segment_specific_Promise is a wrapper for a Segment_specific promised by a client call.
type Segment_specific_Promise struct{ *capnp.Pipeline }

func (p Segment_specific_Promise) Struct() (Segment_specific, error) {
	s, err := p.Pipeline.Struct()
	return Segment_specific{s}, err
}

func (p Segment_specific_Promise) WbbtreeNode() WBBTreeNode_Promise {
	return WBBTreeNode_Promise{Pipeline: p.Pipeline.GetPipeline(2)}
}

type WBBTreeNode struct{ capnp.Struct }

// WBBTreeNode_TypeID is the unique identifier for the type WBBTreeNode.
const WBBTreeNode_TypeID = 0xfafcfa8b7a7a994f

func NewWBBTreeNode(s *capnp.Segment) (WBBTreeNode, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return WBBTreeNode{st}, err
}

func NewRootWBBTreeNode(s *capnp.Segment) (WBBTreeNode, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return WBBTreeNode{st}, err
}

func ReadRootWBBTreeNode(msg *capnp.Message) (WBBTreeNode, error) {
	root, err := msg.RootPtr()
	return WBBTreeNode{root.Struct()}, err
}

func (s WBBTreeNode) String() string {
	str, _ := text.Marshal(0xfafcfa8b7a7a994f, s.Struct)
	return str
}

func (s WBBTreeNode) Key() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s WBBTreeNode) HasKey() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s WBBTreeNode) SetKey(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s WBBTreeNode) CountLeft() uint64 {
	return s.Struct.Uint64(0)
}

func (s WBBTreeNode) SetCountLeft(v uint64) {
	s.Struct.SetUint64(0, v)
}

func (s WBBTreeNode) CountRight() uint64 {
	return s.Struct.Uint64(8)
}

func (s WBBTreeNode) SetCountRight(v uint64) {
	s.Struct.SetUint64(8, v)
}

// WBBTreeNode_List is a list of WBBTreeNode.
type WBBTreeNode_List struct{ capnp.List }

// NewWBBTreeNode creates a new list of WBBTreeNode.
func NewWBBTreeNode_List(s *capnp.Segment, sz int32) (WBBTreeNode_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1}, sz)
	return WBBTreeNode_List{l}, err
}

func (s WBBTreeNode_List) At(i int) WBBTreeNode { return WBBTreeNode{s.List.Struct(i)} }

func (s WBBTreeNode_List) Set(i int, v WBBTreeNode) error { return s.List.SetStruct(i, v.Struct) }

func (s WBBTreeNode_List) String() string {
	str, _ := text.MarshalList(0xfafcfa8b7a7a994f, s.List)
	return str
}

// WBBTreeNode_Promise is a wrapper for a WBBTreeNode promised by a client call.
type WBBTreeNode_Promise struct{ *capnp.Pipeline }

func (p WBBTreeNode_Promise) Struct() (WBBTreeNode, error) {
	s, err := p.Pipeline.Struct()
	return WBBTreeNode{s}, err
}

const schema_d28ad27aef780427 = "x\xda\\\x91?kSQ\x18\xc6\x9f\xe7=IC\xa0" +
	"\x0d\xb9$8\x19\x8a.N\x16t\xec\x92R\x14\xb4\xc6" +
	"\x9a\xb7V\x14\xa9\xe0\xcd\xbd'\xcd\xc5&76\xb7\xd8" +
	"fr\xae\x9f\xc0\xcdU\x97\xa2\xe0\xe2Gp\xcc\xe2\xe6" +
	"&.B\xf7P=r\xd26\x81l\xe7\xfd\x9dgx" +
	"\xfe\x94\xdd\x9a\xdc\xca\xa7\x02\xe8\xd5\xfc\x82;\xad\x7f?" +
	":\xfe\xf0\xe9'\xf4\x0a\xc5\xad<\xf8\xf5\xf0[\xf8\xe3" +
	"\x0f\x9e\x98\x02s@\xa5\xc61X\xb9\xc6\xdf\xe0\xecS" +
	"K\x14w#wx:\x1c\x1d\x8f\x907\x05\xa0B\xf9" +
	"R)\x8a\x7f\xe5\xe5\x04t\x8f\xde\x0f\x87\xef\xc6g\xe3" +
	"y1\xbd\xe4\xa3\x8c*_'\xe2\xcfr\x82\x9bn`" +
	"w\xbb\xb6\x97\xadH\x14\xf6{\xfd\xd5\xc7\x17\xe7\xa0_" +
	"\xb7Q\xd2N\"-\x9b\xdc\xa2sU\x0a\x10\x84\xab\x80" +
	"\xee\x18jGX\xe3?'U\x1a \xb0\x1b\x80\xc6\x86" +
	"\xda\x17\xd6\xe4\xafc\xd5\x07\x08\xba\x1e\xef\x19\xea\xa1\xb0" +
	"f\xce\xbc:\x0f\x04\x07-@3C}+\xacGi" +
	"\xb7\x9bdXpq\x98\x85\x0d\x1b\xb6\x01p\x09\xc2%" +
	"p\xc26\xd3\xd8zV\x84\xb0\x08\xba7\xadV\xb6o" +
	"\xed&\x0ailY\x9e\x85\x05Y\x06\xa7yx\x99g" +
	"yr7I]49 G \xb8\xeb\x9d\xdd1\xd4" +
	"\x97\xc2\x80\xac\xd2\xc3\x17\xb7\x01}f\xa8\x99\x90B\xce" +
	"\xf6\x09^o@\\\xd4I\xf6\xe2}\xdb\xf3nJ`" +
	"\xd3pb\xaa\x04.\x0f\x92\xa1\x1d\xccA7\xe8\x9f7" +
	"\x08`\xbe\xe5\xa7\xeb\xeb\xdb>D\x1a\xd3\xce9\xbb\x0e" +
	"\xe8\x9a\xa16\x84\x97\xc6\xeeo\x01z\xcfP\xb7\x85\x81" +
	"\xf0|\x0a}\x0eh\xd3Pw\x84\x85W\xf6hZZ" +
	"\x94\x1e\xf4\xb2\x86m\x83\xd9\xb4\xb4\x09\xdbJva:" +
	"S\xf8?\x00\x00\xff\xffu\x13\xa2*"

func init() {
	schemas.Register(schema_d28ad27aef780427,
		0xdeaaa08a79ca3fef,
		0xecd761ba4de54b2e,
		0xfafcfa8b7a7a994f)
}
