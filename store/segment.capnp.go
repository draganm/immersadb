// Code generated by capnpc-go. DO NOT EDIT.

package segment

import (
	strconv "strconv"
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
)

type Segment struct{ capnp.Struct }
type Segment_specific Segment
type Segment_specific_Which uint16

const (
	Segment_specific_Which_dataLeaf    Segment_specific_Which = 0
	Segment_specific_Which_dataNode    Segment_specific_Which = 1
	Segment_specific_Which_wbbtreeNode Segment_specific_Which = 2
)

func (w Segment_specific_Which) String() string {
	const s = "dataLeafdataNodewbbtreeNode"
	switch w {
	case Segment_specific_Which_dataLeaf:
		return s[0:8]
	case Segment_specific_Which_dataNode:
		return s[8:16]
	case Segment_specific_Which_wbbtreeNode:
		return s[16:27]

	}
	return "Segment_specific_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// Segment_TypeID is the unique identifier for the type Segment.
const Segment_TypeID = 0xecd761ba4de54b2e

func NewSegment(s *capnp.Segment) (Segment, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 3})
	return Segment{st}, err
}

func NewRootSegment(s *capnp.Segment) (Segment, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 3})
	return Segment{st}, err
}

func ReadRootSegment(msg *capnp.Message) (Segment, error) {
	root, err := msg.RootPtr()
	return Segment{root.Struct()}, err
}

func (s Segment) String() string {
	str, _ := text.Marshal(0xecd761ba4de54b2e, s.Struct)
	return str
}

func (s Segment) Children() (capnp.UInt64List, error) {
	p, err := s.Struct.Ptr(0)
	return capnp.UInt64List{List: p.List()}, err
}

func (s Segment) HasChildren() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Segment) SetChildren(v capnp.UInt64List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewChildren sets the children field to a newly
// allocated capnp.UInt64List, preferring placement in s's segment.
func (s Segment) NewChildren(n int32) (capnp.UInt64List, error) {
	l, err := capnp.NewUInt64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.UInt64List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

func (s Segment) Sizes() (capnp.UInt64List, error) {
	p, err := s.Struct.Ptr(1)
	return capnp.UInt64List{List: p.List()}, err
}

func (s Segment) HasSizes() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Segment) SetSizes(v capnp.UInt64List) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewSizes sets the sizes field to a newly
// allocated capnp.UInt64List, preferring placement in s's segment.
func (s Segment) NewSizes(n int32) (capnp.UInt64List, error) {
	l, err := capnp.NewUInt64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.UInt64List{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

func (s Segment) Specific() Segment_specific { return Segment_specific(s) }

func (s Segment_specific) Which() Segment_specific_Which {
	return Segment_specific_Which(s.Struct.Uint16(0))
}
func (s Segment_specific) DataLeaf() ([]byte, error) {
	if s.Struct.Uint16(0) != 0 {
		panic("Which() != dataLeaf")
	}
	p, err := s.Struct.Ptr(2)
	return []byte(p.Data()), err
}

func (s Segment_specific) HasDataLeaf() bool {
	if s.Struct.Uint16(0) != 0 {
		return false
	}
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s Segment_specific) SetDataLeaf(v []byte) error {
	s.Struct.SetUint16(0, 0)
	return s.Struct.SetData(2, v)
}

func (s Segment_specific) DataNode() uint64 {
	if s.Struct.Uint16(0) != 1 {
		panic("Which() != dataNode")
	}
	return s.Struct.Uint64(8)
}

func (s Segment_specific) SetDataNode(v uint64) {
	s.Struct.SetUint16(0, 1)
	s.Struct.SetUint64(8, v)
}

func (s Segment_specific) WbbtreeNode() (WBBTreeNode, error) {
	if s.Struct.Uint16(0) != 2 {
		panic("Which() != wbbtreeNode")
	}
	p, err := s.Struct.Ptr(2)
	return WBBTreeNode{Struct: p.Struct()}, err
}

func (s Segment_specific) HasWbbtreeNode() bool {
	if s.Struct.Uint16(0) != 2 {
		return false
	}
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s Segment_specific) SetWbbtreeNode(v WBBTreeNode) error {
	s.Struct.SetUint16(0, 2)
	return s.Struct.SetPtr(2, v.Struct.ToPtr())
}

// NewWbbtreeNode sets the wbbtreeNode field to a newly
// allocated WBBTreeNode struct, preferring placement in s's segment.
func (s Segment_specific) NewWbbtreeNode() (WBBTreeNode, error) {
	s.Struct.SetUint16(0, 2)
	ss, err := NewWBBTreeNode(s.Struct.Segment())
	if err != nil {
		return WBBTreeNode{}, err
	}
	err = s.Struct.SetPtr(2, ss.Struct.ToPtr())
	return ss, err
}

// Segment_List is a list of Segment.
type Segment_List struct{ capnp.List }

// NewSegment creates a new list of Segment.
func NewSegment_List(s *capnp.Segment, sz int32) (Segment_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 3}, sz)
	return Segment_List{l}, err
}

func (s Segment_List) At(i int) Segment { return Segment{s.List.Struct(i)} }

func (s Segment_List) Set(i int, v Segment) error { return s.List.SetStruct(i, v.Struct) }

func (s Segment_List) String() string {
	str, _ := text.MarshalList(0xecd761ba4de54b2e, s.List)
	return str
}

// Segment_Promise is a wrapper for a Segment promised by a client call.
type Segment_Promise struct{ *capnp.Pipeline }

func (p Segment_Promise) Struct() (Segment, error) {
	s, err := p.Pipeline.Struct()
	return Segment{s}, err
}

func (p Segment_Promise) Specific() Segment_specific_Promise {
	return Segment_specific_Promise{p.Pipeline}
}

// Segment_specific_Promise is a wrapper for a Segment_specific promised by a client call.
type Segment_specific_Promise struct{ *capnp.Pipeline }

func (p Segment_specific_Promise) Struct() (Segment_specific, error) {
	s, err := p.Pipeline.Struct()
	return Segment_specific{s}, err
}

func (p Segment_specific_Promise) WbbtreeNode() WBBTreeNode_Promise {
	return WBBTreeNode_Promise{Pipeline: p.Pipeline.GetPipeline(2)}
}

type WBBTreeNode struct{ capnp.Struct }

// WBBTreeNode_TypeID is the unique identifier for the type WBBTreeNode.
const WBBTreeNode_TypeID = 0xfafcfa8b7a7a994f

func NewWBBTreeNode(s *capnp.Segment) (WBBTreeNode, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return WBBTreeNode{st}, err
}

func NewRootWBBTreeNode(s *capnp.Segment) (WBBTreeNode, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return WBBTreeNode{st}, err
}

func ReadRootWBBTreeNode(msg *capnp.Message) (WBBTreeNode, error) {
	root, err := msg.RootPtr()
	return WBBTreeNode{root.Struct()}, err
}

func (s WBBTreeNode) String() string {
	str, _ := text.Marshal(0xfafcfa8b7a7a994f, s.Struct)
	return str
}

func (s WBBTreeNode) Key() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s WBBTreeNode) HasKey() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s WBBTreeNode) SetKey(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s WBBTreeNode) CountLeft() uint64 {
	return s.Struct.Uint64(0)
}

func (s WBBTreeNode) SetCountLeft(v uint64) {
	s.Struct.SetUint64(0, v)
}

func (s WBBTreeNode) CountRight() uint64 {
	return s.Struct.Uint64(8)
}

func (s WBBTreeNode) SetCountRight(v uint64) {
	s.Struct.SetUint64(8, v)
}

// WBBTreeNode_List is a list of WBBTreeNode.
type WBBTreeNode_List struct{ capnp.List }

// NewWBBTreeNode creates a new list of WBBTreeNode.
func NewWBBTreeNode_List(s *capnp.Segment, sz int32) (WBBTreeNode_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1}, sz)
	return WBBTreeNode_List{l}, err
}

func (s WBBTreeNode_List) At(i int) WBBTreeNode { return WBBTreeNode{s.List.Struct(i)} }

func (s WBBTreeNode_List) Set(i int, v WBBTreeNode) error { return s.List.SetStruct(i, v.Struct) }

func (s WBBTreeNode_List) String() string {
	str, _ := text.MarshalList(0xfafcfa8b7a7a994f, s.List)
	return str
}

// WBBTreeNode_Promise is a wrapper for a WBBTreeNode promised by a client call.
type WBBTreeNode_Promise struct{ *capnp.Pipeline }

func (p WBBTreeNode_Promise) Struct() (WBBTreeNode, error) {
	s, err := p.Pipeline.Struct()
	return WBBTreeNode{s}, err
}

const schema_d28ad27aef780427 = "x\xda\\\x91\xb1kSQ\x14\xc6\xbf\xef\xdc\xc4P\xb0" +
	"!\x8f\x04\xa7\x86\xa2\x8b\x93\x05\x1d]Z\x8a\x82\xd6\xb4" +
	"\xe6\xd4\x14\x8b(4y\xef\xa6}h\xf3b\xdf+\x9a" +
	"\xfc\x09\xf5/psv)8\xba;(\xb8dqs" +
	"s\x13\xea\x1c\xd4+\xf7\xc5&%\xdb9\xbf\xfb\x0d\xbf" +
	"\xf3\xdd\xca\xaf5\xb9YL\x04\xd0\xa5\xe2%w\xb6\xfa" +
	"ep\xf2\xee\xfdw\xe8\x15\x8a[y\xf0c\xf3c\xfb" +
	"\xdbO\xec\x98\x12\x0dP\xads\x0cV\xaf\xf2\x14\x9c=" +
	"j\x99\xe2\xae\x17^\x9f\x0dG'#\x14M\x09\xa8~" +
	"\xe2\x87\xeaW\xfa\xe9s\x1e~\xf8v8|3\xfe=" +
	"\x9e\x0f\xe7\x91C\x19U\x07\xe2\xa7c9\xc5\x0d\x97\xda" +
	"\xfdC\xdb\xcbV$l\xf7{\xfd\xdb\x8f\xfe\xafi\x7f" +
	"\xd5\x86q7\x0e\xf5\xb2),9'5\x0a\x10\xdc\xdd" +
	"\x00\xf4\x8e\xa16\x85u\xfeu\xacy\xd5`\xd3\xe3\x86" +
	"\xa1\xee\x0a\xeb\xf2\xc7\xa7\x0b@\xb0\xd3\x01\xb4e\xa8{" +
	"B\x17\xb5\xb3v\xc3\xb6\xbb\x00\xb8\x08\xe1\"&l+" +
	"\x89\xacg\x0b\x10.\x80\xeeU\xa7\x93\x1dY\xbb\x85R" +
	"\x12YVf\xd7\x80\xac\x80Sa\x9e\x0b/\xe7{\x93" +
	"\xf4\xaa@\x81\x17=\xf7\x84\x01Y\xa3\x87\xcfn\x01\xba" +
	"k\xa8\x99\x90B\xce> x\xb9\x01q\xe1A\xfc\"" +
	":\xb2=oS\x06\x9b\x86\xb9T\x19\\N\xe3\xa1M" +
	"\xe7\xa0K\xfb\x93\x8a\x00\xcc\xd7\xf8x}\xbd\xe5\x8fH" +
	"\"\xda9\xb3k\x80\xae\x19jCx.v\x7f\x1b\xd0" +
	"{\x86\xda\x12\x06\xc2I\xd5\xfa\x04\xd0\xa6\xa1>\x15\x96" +
	"\x9e\xdb\xc1\xb4\xb409\xeee\x0d\xdb\x05\xb3ii9" +
	"\xdb\x8e\xf7a\x0e\xa6\xf0_\x00\x00\x00\xff\xff\xfc\x90\x9b" +
	"G"

func init() {
	schemas.Register(schema_d28ad27aef780427,
		0xdeaaa08a79ca3fef,
		0xecd761ba4de54b2e,
		0xfafcfa8b7a7a994f)
}
